# CI/CD workflow for macOS systems to build bittorrent tracker editor app
# Uses GitHub Actions macOS runners to build the app for both Apple silicon (aarch64) and Intel Mac (x86_64)
# Then create a Universal binary using lipo tool.
# Finally create a dmg file for end user distribution.
# The build also codesign and notarize the dmg file if the required Apple developer certificate
# and notarization credentials are present in the GitHub secrets.
# The build is triggered on push, pull request, manual workflow dispatch and every 6 months cron job.
#
# macos-15-intel runner is used to build the x86_64 version.
# macos-latest runner is used to build the aarch64 version and also to create the Universal binary dmg file.
# The build uses Free Pascal Compiler (FPC) and Lazarus IDE to build the app.
#
# macos-15-intel runner is the last macOS runner that supports Intel architecture.
# Newer macOS runners only support Apple silicon (aarch64) architecture.
# Keep supporting Intel architecture build while there runners are still available.
#
# Must use macOS ditto tool to create zip files.
# Using zip command creates zip files that missing some metadata required for macOS apps.


name: CI/CD on macOS systems.

permissions:
  contents: write

on:
    push:
    pull_request:
    workflow_dispatch:
    # Automatic cron build every 6 months to check if everything still works.
    schedule:
    - cron: "0 0 1 1/6 *"

env:
  MACOS_APP: enduser/trackereditor.app
  PROGRAM_NAME_WITH_PATH: 'enduser/trackereditor'
  BUILD_WITH_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
  PROJECT_LPI: source/project/tracker_editor/trackereditor.lpi
  RELEASE_DMG_FILE: trackereditor_macOS_notarized_universal_binary.dmg
  # Copied the latest Lazarus source code from: https://sourceforge.net/projects/lazarus/files/Lazarus%20Zip%20_%20GZip/
  LAZARUS_URL_TAR_GZ: "https://github.com/GerryFerdinandus/bittorrent-tracker-editor/releases/download/V1.32.0/lazarus.tar.gz"

jobs:
  build_aarch64: # Build for Apple silicon Mac architecture
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Install Free Pascal Compiler (FPC) multi arch version for macOS x86_64 and aarch64
      run: brew install fpc
      shell: bash

    - name: Download Lazarus source code into temp folder
      run: |
        #Download lazarus source code. Directory 'lazarus' will be created in the temp folder.
        cd ${RUNNER_TEMP}
        curl -L -O ${{ env.LAZARUS_URL_TAR_GZ }}
        tar -xzf *.tar.gz
      shell: bash

    - name: Build lazbuild from Lazarus source code
      run: |
        # make lazbuild and put the link with extra parameter in the temp folder.
        LAZARUS_DIR=${RUNNER_TEMP}/lazarus
        cd "$LAZARUS_DIR"
        make lazbuild
        echo "$LAZARUS_DIR/lazbuild --primary-config-path=$LAZARUS_DIR --lazarusdir=$LAZARUS_DIR \$*" > ${RUNNER_TEMP}/lazbuild
        chmod +x ${RUNNER_TEMP}/lazbuild
        # Add lazbuild to the PATH variable. So it can be used in the next steps.
        echo ${RUNNER_TEMP} >> $GITHUB_PATH
      shell: bash

    - name: Build trackereditor app for Apple silicon (aarch64)
      run: |
        lazbuild --build-all --build-mode=Release --widgetset=cocoa --cpu=aarch64 ${{ env.PROJECT_LPI }}
      shell: bash

    - name: Test App SSL connection
      run: open "${{ env.PROGRAM_NAME_WITH_PATH }}" --args -TEST_SSL
      shell: bash

    - name: Set correct version number in macOS .app bundle Info.plist from metainfo xml file
      env:
        METAINFO_FILE: metainfo/io.github.gerryferdinandus.bittorrent-tracker-editor.metainfo.xml
      run: |
       TRACKER_EDITOR_VERSION=$(xmllint --xpath "string(/component/releases/release[1]/@version)" $METAINFO_FILE)
       echo Program version: $TRACKER_EDITOR_VERSION
       plutil -replace CFBundleShortVersionString -string $TRACKER_EDITOR_VERSION ${{ env.MACOS_APP }}/Contents/Info.plist
      shell: bash

    - name: Create and set app icon in macOS .app bundle
      env:
        ICON_FILE: 'metainfo/io.github.gerryferdinandus.bittorrent-tracker-editor.png'
      run: |

        # ------ Create icon set and move it into the app
        iconset_folder="temp_folder.iconset"
        rm -rf "${iconset_folder}"
        mkdir -p "${iconset_folder}"

        for s in 16 32 128 256 512; do
          d=$(($s*2))
          sips -Z $s $ICON_FILE --out "${iconset_folder}/icon_${s}x$s.png"
          sips -Z $d $ICON_FILE --out "${iconset_folder}/icon_${s}x$s@2x.png"
        done

        # create .icns icon file
        iconutil -c icns "${iconset_folder}" -o "iconfile.icns"
        rm -r "${iconset_folder}"

        # move icon file to the app
        mv -f "iconfile.icns"  "${{ env.MACOS_APP }}/Contents/Resources"

        # add icon to plist xml file CFBundleIconFile = "iconfile"
        plutil -insert CFBundleIconFile -string "iconfile" "${{ env.MACOS_APP }}/Contents/Info.plist"
      shell: bash

    - name: Zip the macOS .app bundle for artifact upload
      run: ditto -c -k enduser/trackereditor.app enduser/trackereditor_app.zip
      shell: bash

    - name: Rename built -aarch64 binary for artifact upload
      run: |
        mv ${{ env.PROGRAM_NAME_WITH_PATH }} ${{ env.PROGRAM_NAME_WITH_PATH }}-aarch64
        ditto -c -k ${{ env.PROGRAM_NAME_WITH_PATH }}-aarch64 ${{ env.PROGRAM_NAME_WITH_PATH }}-aarch64.zip
      shell: bash

    - name: Upload Artifact.
      uses: actions/upload-artifact@v5
      with:
        name: artifact-aarch64
        # Include both the zipped universal app bundle and the aarch64 binary zip
        path: enduser/*.zip
        if-no-files-found: error

  build_x86_64: # Build for Intel Mac architecture
    runs-on: macos-15-intel
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Install Free Pascal Compiler (FPC) multi arch version for macOS x86_64 and aarch64
      run: brew install fpc
      shell: bash

    - name: Download Lazarus source code into temp folder
      run: |
        #Download lazarus source code. Directory 'lazarus' will be created in the temp folder.
        cd ${RUNNER_TEMP}
        curl -L -O ${{ env.LAZARUS_URL_TAR_GZ }}
        tar -xzf *.tar.gz
      shell: bash

    - name: Build lazbuild from Lazarus source code
      run: |
        # make lazbuild and put the link with extra parameter in the temp folder.
        LAZARUS_DIR=${RUNNER_TEMP}/lazarus
        cd "$LAZARUS_DIR"
        make lazbuild
        echo "$LAZARUS_DIR/lazbuild --primary-config-path=$LAZARUS_DIR --lazarusdir=$LAZARUS_DIR \$*" > ${RUNNER_TEMP}/lazbuild
        chmod +x ${RUNNER_TEMP}/lazbuild
        # Add lazbuild to the PATH variable. So it can be used in the next steps.
        echo ${RUNNER_TEMP} >> $GITHUB_PATH
      shell: bash

    - name: Build trackereditor app for Intel Mac version (x86_64)
      run: |
        lazbuild --build-all --build-mode=Release --widgetset=cocoa --cpu=x86_64 ${{ env.PROJECT_LPI }}
      shell: bash

    - name: Test App SSL connection
      run: open "${{ env.PROGRAM_NAME_WITH_PATH }}" --args -TEST_SSL
      shell: bash

    - name: Rename built -x86_64 binary for artifact upload
      run: |
        mv ${{ env.PROGRAM_NAME_WITH_PATH }} ${{ env.PROGRAM_NAME_WITH_PATH }}-x86_64
        ditto -c -k ${{ env.PROGRAM_NAME_WITH_PATH }}-x86_64 ${{ env.PROGRAM_NAME_WITH_PATH }}-x86_64.zip
      shell: bash

    - name: Upload Artifact.
      uses: actions/upload-artifact@v5
      with:
        name: artifact-x86_64
        path: enduser/*.zip
        if-no-files-found: error


  create_universal_macOS_binary: # Create Universal binary from aarch64 and x86_64 builds
    runs-on: macos-latest
    timeout-minutes: 60

    needs:
      - build_aarch64
      - build_x86_64

    steps:
    - name: Install create-dmg tool
      run: brew install create-dmg
      shell: bash

    - name: Download build artifacts from previous jobs
      uses: actions/download-artifact@v5
      with:
        path: enduser/
        merge-multiple: true

    - name: Display the downloaded artifact files
      run: ls -R enduser/
      shell: bash

    - name: Unzip all the artifact files
      run: |
        ditto -xk enduser/trackereditor_app.zip enduser/trackereditor.app
        ditto -xk ${{ env.PROGRAM_NAME_WITH_PATH }}-x86_64.zip enduser/
        ditto -xk ${{ env.PROGRAM_NAME_WITH_PATH }}-aarch64.zip enduser/
        # Remove the zip files after extraction
        rm -f enduser/*.zip
      shell: bash

    - name: Display the downloaded artifact files after unzip
      run: ls -R enduser/
      shell: bash

    - name: Create a Universal macOS binary from aarch64 and x86_64
      run: |
        # Create Universal binary using lipo tool
        lipo -create -output ${{ env.PROGRAM_NAME_WITH_PATH }} ${{ env.PROGRAM_NAME_WITH_PATH }}-aarch64 ${{ env.PROGRAM_NAME_WITH_PATH }}-x86_64

        # Remove the previous architecture specific binaries
        rm -f ${{ env.PROGRAM_NAME_WITH_PATH }}-*
      shell: bash

    - name: Replace the macOS .app bundle binary with the Universal binary
      run: |
        PROGRAM_NAME_ONLY=$(basename -- "${{ env.PROGRAM_NAME_WITH_PATH }}")
        # remove the previous app (symbolic link)
        rm -f "${{ env.MACOS_APP }}/Contents/MacOS/${PROGRAM_NAME_ONLY}"
        # copy the program to the app version.
        mv -f "${{ env.PROGRAM_NAME_WITH_PATH }}" "${{ env.MACOS_APP }}/Contents/MacOS"
        ls -l "${{ env.MACOS_APP }}/Contents/MacOS/"
      shell: bash

    - name: Display the enduser/ folder contents
      run: ls -R enduser/
      shell: bash

    - name: Verify the Universal binary architectures
      run: |
        lipo -archs "${{ env.MACOS_APP }}"/Contents/MacOS/trackereditor
        lipo -archs "${{ env.MACOS_APP }}"/Contents/MacOS/trackereditor | grep -Fq x86_64
        lipo -archs "${{ env.MACOS_APP }}"/Contents/MacOS/trackereditor | grep -Fq arm64
      shell: bash

    - name: Test App SSL connection
      run: open "${{ env.MACOS_APP }}" --args -TEST_SSL
      shell: bash

    - name: Codesign macOS app bundle. If certificate is present.
      if: ${{ env.BUILD_WITH_CERTIFICATE != '' }}
      # This macOS Codesign step is copied from:
      # https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
      # This is a bit different from the previous version for Travis-CI build system to build bittorrent tracker editor
      # More info https://developer.apple.com/forums/thread/128166
      env:
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        # Turn our base64-encoded certificate back to a regular .p12 file
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

        # We need to create a new keychain, otherwise using the certificate will prompt
        # with a UI dialog asking for the certificate password, which we can't
        # use in a headless CI environment

        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

        # sign the app. -sign is the developer cetificate ID
        /usr/bin/codesign --timestamp --force --options runtime --sign "$MACOS_CERTIFICATE_NAME" "${{ env.MACOS_APP }}"
      shell: bash

    - name: Display the enduser/ folder contents
      run: ls -R enduser/
      shell: bash

    - name: Create dmg file from the enduser/ folder
      run: |
        # Build dmg image. https://github.com/create-dmg/create-dmg
        create-dmg \
          --volname "bittorrent-tracker-editor" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon "trackereditor.app" 200 190 \
          --app-drop-link 600 185 \
          ${{ env.RELEASE_DMG_FILE }} \
          "./enduser"
      shell: bash

    - name: Codesign dmg file. If certificate is present.
      if: ${{ env.BUILD_WITH_CERTIFICATE != '' }}
      env:
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
      run: |
        /usr/bin/codesign --timestamp --force --options runtime --sign "$MACOS_CERTIFICATE_NAME" "${{ env.RELEASE_DMG_FILE }}"
      shell: bash

    - name: Notarize macOS DMG bundle. If certificate is present.
      if: ${{ env.BUILD_WITH_CERTIFICATE != '' }}
      env:
        PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
        PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      run: |
        # Store the notarization credentials so that we can prevent a UI password dialog
        # from blocking the CI

        echo "Create keychain profile"
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

        # We can't notarize an app bundle directly, but we need to compress it as an archive.
        # Therefore, we create a zip file containing our app bundle, so that we can send it to the
        # notarization service

        echo "Creating temp notarization archive"
        ditto -c -k --keepParent "${{ env.RELEASE_DMG_FILE }}" "notarization.zip"

        # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
        # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
        # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
        # you're curious

        echo "Notarize app"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

        # Finally, we need to "attach the staple" to our executable, which will allow our app to be
        # validated by macOS even when an internet connection is not available.
        echo "Attach staple"
        xcrun stapler staple "${{ env.RELEASE_DMG_FILE }}"
      shell: bash

    - name: Use diferent .dmg file name for non signed/notarize version
      if: ${{ env.BUILD_WITH_CERTIFICATE == '' }}
      run: mv ${{ env.RELEASE_DMG_FILE }} trackereditor_macOS_UNSIGNED_universal_binary.dmg
      shell: bash

    - name: Upload Artifact. Signed/Notarize is optional.
      uses: actions/upload-artifact@v5
      with:
        name: artifact-${{ runner.os }}
        path: "*.dmg"
        compression-level: 0 # no compression. Content is already a zip file
        if-no-files-found: error

    - name: Notarize file release to end user. If certificate is present.
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/') && (env.BUILD_WITH_CERTIFICATE != '')
      with:
        files: ${{ env.RELEASE_DMG_FILE }}
